/* tslint:disable */
/* eslint-disable */
/**
 * PackAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateListBodyRequest,
  ListBody,
} from '../models';
import {
    CreateListBodyRequestFromJSON,
    CreateListBodyRequestToJSON,
    ListBodyFromJSON,
    ListBodyToJSON,
} from '../models';

export interface ApiListBodyIdDeleteRequest {
    id: string;
}

export interface ApiListBodyIdGetRequest {
    id: string;
}

export interface ApiListBodyIdPutRequest {
    id: string;
    listBody?: ListBody;
}

export interface ApiListBodyListListIdGetRequest {
    listId: string;
}

export interface ApiListBodyPostRequest {
    createListBodyRequest?: CreateListBodyRequest;
}

/**
 * 
 */
export class ListBodyApi extends runtime.BaseAPI {

    /**
     */
    async apiListBodyIdDeleteRaw(requestParameters: ApiListBodyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiListBodyIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ListBody/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiListBodyIdDelete(requestParameters: ApiListBodyIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiListBodyIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiListBodyIdGetRaw(requestParameters: ApiListBodyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiListBodyIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ListBody/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBodyFromJSON(jsonValue));
    }

    /**
     */
    async apiListBodyIdGet(requestParameters: ApiListBodyIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBody> {
        const response = await this.apiListBodyIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListBodyIdPutRaw(requestParameters: ApiListBodyIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiListBodyIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ListBody/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ListBodyToJSON(requestParameters.listBody),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiListBodyIdPut(requestParameters: ApiListBodyIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiListBodyIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiListBodyListListIdGetRaw(requestParameters: ApiListBodyListListIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ListBody>>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling apiListBodyListListIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ListBody/List/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ListBodyFromJSON));
    }

    /**
     */
    async apiListBodyListListIdGet(requestParameters: ApiListBodyListListIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ListBody>> {
        const response = await this.apiListBodyListListIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListBodyPostRaw(requestParameters: ApiListBodyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ListBody`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListBodyRequestToJSON(requestParameters.createListBodyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBodyFromJSON(jsonValue));
    }

    /**
     */
    async apiListBodyPost(requestParameters: ApiListBodyPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListBody> {
        const response = await this.apiListBodyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
