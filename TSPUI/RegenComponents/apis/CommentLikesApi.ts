/* tslint:disable */
/* eslint-disable */
/**
 * PackAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentLike,
  CreateCommentLikeRequest,
} from '../models';
import {
    CommentLikeFromJSON,
    CommentLikeToJSON,
    CreateCommentLikeRequestFromJSON,
    CreateCommentLikeRequestToJSON,
} from '../models';

export interface ApiCommentsCommentIdLikesIdDeleteRequest {
    commentId: string;
    id: string;
}

export interface ApiCommentsCommentIdLikesIdGetRequest {
    commentId: string;
    id: string;
}

export interface ApiCommentsCommentIdLikesPostRequest {
    commentId: string;
    createCommentLikeRequest?: CreateCommentLikeRequest;
}

/**
 * 
 */
export class CommentLikesApi extends runtime.BaseAPI {

    /**
     */
    async apiCommentsCommentIdLikesIdDeleteRaw(requestParameters: ApiCommentsCommentIdLikesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling apiCommentsCommentIdLikesIdDelete.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCommentsCommentIdLikesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comments/{commentId}/likes/{id}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCommentsCommentIdLikesIdDelete(requestParameters: ApiCommentsCommentIdLikesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiCommentsCommentIdLikesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiCommentsCommentIdLikesIdGetRaw(requestParameters: ApiCommentsCommentIdLikesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentLike>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling apiCommentsCommentIdLikesIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCommentsCommentIdLikesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/comments/{commentId}/likes/{id}`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentLikeFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentsCommentIdLikesIdGet(requestParameters: ApiCommentsCommentIdLikesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentLike> {
        const response = await this.apiCommentsCommentIdLikesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCommentsCommentIdLikesPostRaw(requestParameters: ApiCommentsCommentIdLikesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentLike>> {
        if (requestParameters.commentId === null || requestParameters.commentId === undefined) {
            throw new runtime.RequiredError('commentId','Required parameter requestParameters.commentId was null or undefined when calling apiCommentsCommentIdLikesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/comments/{commentId}/likes`.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters.commentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommentLikeRequestToJSON(requestParameters.createCommentLikeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentLikeFromJSON(jsonValue));
    }

    /**
     */
    async apiCommentsCommentIdLikesPost(requestParameters: ApiCommentsCommentIdLikesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentLike> {
        const response = await this.apiCommentsCommentIdLikesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
